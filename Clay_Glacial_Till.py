#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Dec 16 19:39:07 2024

@author: keiragupta
"""
"""
COMPARISON 1: CLAY AND GLACIAL TILL

This code accompanies "Seismic Waves (Taylor's Version)", which looks at how the duration of seismic waves change over a set distance
when ground materials are changing. 

The code here looks at how the duration of seismic waves change over a set distance when the ground material is consistantly 
clay and/or glacial till, which has a slow wave velocity. It is meant to be used as a comparison with "Seismic Waves (Taylor's Version)",
to be able to better understand the impacts of changing ground materials and velocity.

Using the seismic waves generated by Taylor Swift's "The Eras Tour", this code models the 1D advection of the seismic waves through 
the ground, given a constant (slow) velocity. The final figure shows that the songs take quite a bit of time to travel due to 
the slow velocity.

SETLIST DATA
All setlist-related data was found from the Caplan-Auerback et al. 2024 article (1) or the corresponding supplemental material (2). 
* Song intensity data is drawn from Figure 2a of the Caplan-Auerback et al. 2024 article, where intensities were determined
as values from 0-10 based on an arbitrarily drawn (consistant) axis on the figure. The axes were established and the data was pulled
from the figure using WebPlotDigitizer. 
* Song duration data was taken from the Caplan-Auerbach et al. 2024 supplemental material.

(1) Caplan-Auerbach, Jacqueline, et al. “Beast quake (Taylor’s version): Analysis of seismic signals recorded during two Taylor Swift 
concerts in Seattle, July 2023.” GSA Today, vol. 34, no. 5, May 2024, pp. 4–10, https://doi.org/10.1130/gsatg589a.1. 

(2) Caplan-Auerbach, Jacqueline, et al. Supplemental Material: Beast Quake (Taylor’s Version): Analysis of Seismic Signals Recorded 
during Two Taylor Swift Concerts in Seattle, July 2023, 18 Mar. 2024, https://doi.org/10.1130/gsat.s.25431844.v1. 

* All Eras Tour related data is based off of the show at Lumen Field in Seattle, WA, on July 22, 2023.

GROUND CONDITION DATA
All ground material-related velocity data was obtained from the UNLV source below.
* P-wave velocities for Clay and Glacial Till were drawn from this source.

Boyd, Tom, and Pamela Burnley. “Seismic Velocities of Earth Materials.” Seismology: Notes: Seismic Velocities of Earth Materials, 
2020, pburnley.faculty.unlv.edu/GEOL452_652/seismology/notes/SeismicNotes10RVel.html. 

* Note: Although seismic waves through the ground involve both P-waves and S-waves, only P-waves were taken into account in this
model for simplicity.
"""
### IMPORT NECESSARY PACKAGES
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.interpolate import interp1d

### IMPORT EXTERNAL DATASETS

# Importing setlist data: includes song times, song intensity
df_setlist = pd.read_csv('Setlist.csv', skiprows = 1)
setlist_array = df_setlist.to_numpy()

### ESTABLISH SPATIAL GRID
# The spatial grid remains constant throughout the model
# This model investigates the movement of seismic waves along 1000km (1,000,000m)

dx = 5000 #m (5km)
x = np.arange(0, 1000001, dx) # m (1000km)
nodes = len(x)

### SETTING UP INITIAL CONDITIONS

# Creating empty concentration array 
# This states that the initial intensity coming from the concert is 0.
# Intensity is on a scale from 0-10
# This makes sense, because the "initial" intensity occurs prior to the concert, where waves aren't being generated yet

c = np.zeros(nodes)

# Loading in the "song durations" column of the setlist dataset as durations (d)
d = setlist_array[:,1] # index column from setlist dataset
song_times = np.cumsum((np.hstack((0, d)))) # adding all of these individual durations together so they accumulate

# Establishing supply term
# Here, "supply" is the previously determined song intensity stored in the setlist dataset
# Intensity is on a scale from 0-10

S = setlist_array[:,3] # index intensity column from setlist dataset
S1 = np.append(S, 0) # append 0 onto the end so the size matches the size of song_times (this allows the following interpolation function to work)

# Interpolate song times and supply (intensity)
# Finds an approximate S1 value for every song_times value

f1 = interp1d(song_times, S1, kind = 'nearest')

### DEFINE MODEL PARAMETERS
# Using one constant velocity of 2000 m/s, which is representative of clay and/or glacial till

velocity = np.zeros(nodes)
velocity[x >= 5000] = 2000 # m/s - loading in the velocity at node 1 instead of node 0

# Plotting velocity for visualization purposes 
fig, ax = plt.subplots()
ax.plot(x, velocity, color = 'red', label = 'Wave Velocity')
ax.set_xlabel('Distance (m)')
ax.set_ylabel('Velocity (m/s)')
ax.set_title('Wave Velocity Profile')
ax.legend()
plt.show()

### ESTABLISHING STABILITY: DT AND COURANT NUMBERS
# To keep the model stable, the courant number needs to be less than or equal to 1

velocity_max = np.max(velocity) # isolating the maximum velocity value in a variable
dt = dx / velocity_max # sec - dt = courant * dx / u; this solves for dt using a courant number of 1 for stability
# max velocity is also used to calulate dt since that is the most likely value to cause instability
print(dt) # checking the value of dt

courant = dt * velocity / dx # courant number should equal 1 or less because dt was solved for using a courant number of 1
print(courant) # checking that courant <= 1

### BOUNDARY CONDITIONS
# There will be zero concentration and the beginning and the end

### SETTING UP THE A MATRIX
# The A matrix has been creating a 1D advection upwind scheme

A = np.zeros((nodes, nodes))

# Filling in the A matrix
for i in range (1, nodes):
    A[i, i] = 1 - courant[i] # center diagonal
    A[i, i-1] = courant[i] # left diagonal
A[0, 0] = 1 # setting boundary condition that node 0 always equals 1

### RUN THE MODEL THROUGH TIME
time = 0 # sec
endtime = 9088 # sec - endtime of 9088s is the same as the final value in the cumulitive song_times array 
concentration_over_time = [] # creating an empty list to store concentrations over time in

while time < endtime:
    S1_value = f1(time) # using the f1 function to intermpolate the supply (intensity) value at each timestep
    newc = np.dot(A, c) # taking the dot product of A and the intensity concentrations
    c[:] = newc # putting the dot product results in a new array
    c[1] += S1_value * dt # adding supply (intensity at each new song) at node 1 of the concentration array 
    concentration_over_time.append(c.copy()) # copying each new calculated concentration (c) throughout the concert into a new list
    time += dt

concentration_over_time = np.array(concentration_over_time) # converting list into numpy array

concentration_over_time = concentration_over_time.T # transposing concentration array for plotting purposes

### PLOTTING RESULTS
# Creating a heatmap to show concentration evolution

fig1, ax1 = plt.subplots() #setting initial plot

plt.imshow(concentration_over_time.T, aspect = 'auto', cmap = 'magma', origin='lower', extent = [0, 1000, 0, 180]) #extent=[0, 20000, 0, endtime]
plt.colorbar(label = 'Intensity')

# Plotting lines to show the transitions between Eras for better understandibility
plt.axhline(y = 3.7, color ='white', linestyle = '--', alpha = 0.5, label = 'New Era') # Lover
plt.axhline(y = 22.16, color ='white', linestyle = '--', alpha = 0.5) # Fearless
plt.axhline(y = 33.1, color ='white', linestyle = '--', alpha = 0.5) # Evermore
plt.axhline(y = 47.16, color ='white', linestyle = '--', alpha = 0.5) # Reputation
plt.axhline(y = 63.5, color ='white', linestyle = '--', alpha = 0.5) # Speak Now
plt.axhline(y = 70.5, color ='white', linestyle = '--', alpha = 0.5) # Red
plt.axhline(y = 90.5, color ='white', linestyle = '--', alpha = 0.5) # Folklore
plt.axhline(y = 113.66, color ='white', linestyle = '--', alpha = 0.5) # 1989
plt.axhline(y = 129.83, color ='white', linestyle = '--', alpha = 0.5) # Surprise Songs
plt.axhline(y = 136.5, color ='white', linestyle = '--', alpha = 0.5) # Midnights

# Other plot features
plt.xlabel('Distance (km)')
plt.ylabel('Time (min)')
plt.title('The Eras Tour Seismic Intensity Profile: Through Time and over Clay/Glacial Till')
plt.legend()
plt.show() 